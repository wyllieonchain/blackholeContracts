{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc20Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deployerFee",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidderRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_INCREMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPLOYER_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOUR_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addToPrizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextBidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBidTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc20",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b5cbbdad701349a18e82c664a159ea29ee479827147aa82b1a88f1b3fd76775",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1519253",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000001000000000002000000000000000000020000000000000000000000000000000000000000000000000800000000000000000",
    "blockHash": "0x140f9a964d055b1e4f4f85faf2ce09000798a2c18a17caad9b651a4222ecc250",
    "transactionHash": "0x6b5cbbdad701349a18e82c664a159ea29ee479827147aa82b1a88f1b3fd76775",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x6b5cbbdad701349a18e82c664a159ea29ee479827147aa82b1a88f1b3fd76775",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x140f9a964d055b1e4f4f85faf2ce09000798a2c18a17caad9b651a4222ecc250"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1519253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "15d6d65c4ca8a7072ee1d0637907cab8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deployerFee\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_INCREMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOUR_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBidTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc20\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/USDC20Vault.sol\":\"USDC20Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/USDC20Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract USDC20Vault is Ownable, ReentrancyGuard {\\n    IERC20 public usdc20;\\n    uint256 public constant BASE_INCREMENT = 100 * 1e18; // 100 USDC20 tokens\\n    uint256 public constant VAULT_FEE_BPS = 100; // 1% = 100 basis points\\n    uint256 public constant DEPLOYER_FEE_BPS = 50; // 0.5% = 50 basis points\\n    uint256 public constant TOTAL_FEE_BPS = VAULT_FEE_BPS + DEPLOYER_FEE_BPS; // 1.5%\\n    \\n    address public highestBidder;\\n    uint256 public currentBaseAmount;\\n    uint256 public highestBid;\\n    uint256 public prizePool;\\n    uint256 public lastBidTime;\\n    uint256 public constant HOUR_IN_SECONDS = 60; // Changed from 3600 to 60 for testing\\n    bool public claimed = false;\\n\\n    event BidPlaced(address indexed bidder, uint256 amount, uint256 vaultFee, uint256 deployerFee);\\n    event BidderRefunded(address indexed bidder, uint256 amount);\\n\\n    constructor(address _usdc20Address) Ownable(msg.sender) {\\n        usdc20 = IERC20(_usdc20Address);\\n    }\\n\\n    function placeBid() external nonReentrant {\\n        uint256 baseAmount = currentBaseAmount == 0 ? BASE_INCREMENT : currentBaseAmount + BASE_INCREMENT;\\n        uint256 vaultFee = (baseAmount * VAULT_FEE_BPS) / 10000;\\n        uint256 deployerFee = (baseAmount * DEPLOYER_FEE_BPS) / 10000;\\n        uint256 totalAmount = baseAmount + vaultFee + deployerFee;\\n        \\n        require(usdc20.allowance(msg.sender, address(this)) >= totalAmount, \\\"Insufficient allowance\\\");\\n        \\n        address previousBidder = highestBidder;\\n        uint256 previousBaseAmount = currentBaseAmount;  // Store base amount for refund\\n\\n        // First receive new funds\\n        require(usdc20.transferFrom(msg.sender, address(this), totalAmount), \\\"Transfer failed\\\");\\n\\n        // Update state\\n        highestBidder = msg.sender;\\n        currentBaseAmount = baseAmount;\\n        highestBid = totalAmount;\\n        prizePool += vaultFee;\\n        lastBidTime = block.timestamp;\\n\\n        // Then handle outgoing transfers\\n        require(usdc20.transfer(owner(), deployerFee), \\\"Deployer fee transfer failed\\\");\\n        \\n        if (previousBidder != address(0)) {\\n            require(usdc20.transfer(previousBidder, previousBaseAmount), \\\"Refund failed\\\");\\n            emit BidderRefunded(previousBidder, previousBaseAmount);\\n        }\\n\\n        emit BidPlaced(msg.sender, totalAmount, vaultFee, deployerFee);\\n    }\\n\\n    function getNextBidAmount() external view returns (uint256) {\\n        uint256 nextBase = currentBaseAmount == 0 ? BASE_INCREMENT : currentBaseAmount + BASE_INCREMENT;\\n        uint256 fees = (nextBase * TOTAL_FEE_BPS) / 10000;\\n        return nextBase + fees;\\n    }\\n\\n    function getPrizePool() external view returns (uint256) {\\n        return prizePool;\\n    }\\n\\n    function canClaim() public view returns (bool) {\\n        return !claimed && \\n               block.timestamp >= lastBidTime + HOUR_IN_SECONDS && \\n               highestBidder != address(0);\\n    }\\n\\n    function addToPrizePool(uint256 amount) external onlyOwner {\\n        require(usdc20.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\n        prizePool += amount;\\n    }\\n\\n    function claim() public {\\n        require(canClaim(), \\\"Cannot claim yet or already claimed\\\");\\n        require(msg.sender == highestBidder, \\\"Only highest bidder can claim\\\");\\n        \\n        claimed = true;\\n        require(usdc20.transfer(highestBidder, prizePool), \\\"Prize transfer failed\\\");\\n        require(usdc20.transfer(owner(), currentBaseAmount), \\\"Final bid transfer failed\\\");\\n    }\\n} \",\"keccak256\":\"0x358d37fbcdffc22d5ddf6bc683a5fcc770d0c0a4bf26bb959ecfc169e0dc09c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600860006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001bef38038062001bef833981810160405281019062000052919062000257565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000c85760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000bf91906200029a565b60405180910390fd5b620000d9816200012960201b60201c565b506001808190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002b7565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021f82620001f2565b9050919050565b620002318162000212565b81146200023d57600080fd5b50565b600081519050620002518162000226565b92915050565b60006020828403121562000270576200026f620001ed565b5b6000620002808482850162000240565b91505092915050565b620002948162000212565b82525050565b6000602082019050620002b1600083018462000289565b92915050565b61192880620002c76000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b85780638f8a30ca1161007c5780638f8a30ca146102d457806391f90157146102f2578063d57bde7914610310578063e834a8341461032e578063ecfc7ecc1461034c578063f2fde38b1461035657610137565b8063715018a614610252578063719ce73e1461025c57806371ac08761461027a578063884bf67c146102985780638da5cb5b146102b657610137565b80634e71d92d116100ff5780634e71d92d146101d057806355458ec0146101da578063642ab4b1146101f85780636dc7a627146102165780636f28507c1461023457610137565b8063186ba2531461013c57806335fda2d1146101585780633ee881331461017657806342f1962914610194578063472bd5fc146101b2575b600080fd5b6101566004803603810190610151919061113f565b610372565b005b610160610477565b60405161016d919061117b565b60405180910390f35b61017e610484565b60405161018b9190611215565b60405180910390f35b61019c6104aa565b6040516101a9919061117b565b60405180910390f35b6101ba6104af565b6040516101c7919061117b565b60405180910390f35b6101d86104b4565b005b6101e2610793565b6040516101ef919061117b565b60405180910390f35b610200610799565b60405161020d919061117b565b60405180910390f35b61021e61079f565b60405161022b919061124b565b60405180910390f35b61023c61082c565b604051610249919061117b565b60405180910390f35b61025a61083d565b005b610264610851565b604051610271919061117b565b60405180910390f35b610282610857565b60405161028f919061117b565b60405180910390f35b6102a061085c565b6040516102ad919061117b565b60405180910390f35b6102be610866565b6040516102cb9190611287565b60405180910390f35b6102dc61088f565b6040516102e9919061117b565b60405180910390f35b6102fa610902565b6040516103079190611287565b60405180910390f35b610318610928565b604051610325919061117b565b60405180910390f35b61033661092e565b604051610343919061124b565b60405180910390f35b610354610941565b005b610370600480360381019061036b91906112ce565b610edc565b005b61037a610f62565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103d9939291906112fb565b6020604051808303816000875af11580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c919061135e565b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906113e8565b60405180910390fd5b806006600082825461046d9190611437565b9250508190555050565b68056bc75e2d6310000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603c81565b606481565b6104bc61079f565b6104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f2906114dd565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461058b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058290611549565b60405180910390fd5b6001600860006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006546040518363ffffffff1660e01b8152600401610627929190611569565b6020604051808303816000875af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a919061135e565b6106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906115de565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6106ef610866565b6004546040518363ffffffff1660e01b815260040161070f929190611569565b6020604051808303816000875af115801561072e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610752919061135e565b610791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107889061164a565b60405180910390fd5b565b60045481565b60075481565b6000600860009054906101000a900460ff161580156107cc5750603c6007546107c89190611437565b4210155b80156108275750600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b6032606461083a9190611437565b81565b610845610f62565b61084f6000610fe9565b565b60065481565b603281565b6000600654905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000600454146108b85768056bc75e2d631000006004546108b39190611437565b6108c3565b68056bc75e2d631000005b90506000612710603260646108d89190611437565b836108e3919061166a565b6108ed91906116db565b905080826108fb9190611437565b9250505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600860009054906101000a900460ff1681565b6109496110ad565b600080600454146109705768056bc75e2d6310000060045461096b9190611437565b61097b565b68056bc75e2d631000005b9050600061271060648361098f919061166a565b61099991906116db565b905060006127106032846109ad919061166a565b6109b791906116db565b905060008183856109c89190611437565b6109d29190611437565b905080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610a3292919061170c565b602060405180830381865afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a73919061174a565b1015610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906117c3565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006004549050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610b41939291906112fb565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b84919061135e565b610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba906113e8565b60405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600481905550826005819055508460066000828254610c249190611437565b9250508190555042600781905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610c78610866565b866040518363ffffffff1660e01b8152600401610c96929190611569565b6020604051808303816000875af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd9919061135e565b610d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0f9061182f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e7a57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610da9929190611569565b6020604051808303816000875af1158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec919061135e565b610e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e229061189b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb68630624831a3c69cc6bb427a9b914261a14121aa4a23b9a98bcb9b0d98afdf82604051610e71919061117b565b60405180910390a25b3373ffffffffffffffffffffffffffffffffffffffff167fb46d776cdb48d081a0c7d3ff32dc2792e4e8fbce788723207515723628020d32848787604051610ec4939291906118bb565b60405180910390a2505050505050610eda6110f3565b565b610ee4610f62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f565760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f4d9190611287565b60405180910390fd5b610f5f81610fe9565b50565b610f6a6110fc565b73ffffffffffffffffffffffffffffffffffffffff16610f88610866565b73ffffffffffffffffffffffffffffffffffffffff1614610fe757610fab6110fc565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610fde9190611287565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600154036110e9576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600080fd5b6000819050919050565b61111c81611109565b811461112757600080fd5b50565b60008135905061113981611113565b92915050565b60006020828403121561115557611154611104565b5b60006111638482850161112a565b91505092915050565b61117581611109565b82525050565b6000602082019050611190600083018461116c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111db6111d66111d184611196565b6111b6565b611196565b9050919050565b60006111ed826111c0565b9050919050565b60006111ff826111e2565b9050919050565b61120f816111f4565b82525050565b600060208201905061122a6000830184611206565b92915050565b60008115159050919050565b61124581611230565b82525050565b6000602082019050611260600083018461123c565b92915050565b600061127182611196565b9050919050565b61128181611266565b82525050565b600060208201905061129c6000830184611278565b92915050565b6112ab81611266565b81146112b657600080fd5b50565b6000813590506112c8816112a2565b92915050565b6000602082840312156112e4576112e3611104565b5b60006112f2848285016112b9565b91505092915050565b60006060820190506113106000830186611278565b61131d6020830185611278565b61132a604083018461116c565b949350505050565b61133b81611230565b811461134657600080fd5b50565b60008151905061135881611332565b92915050565b60006020828403121561137457611373611104565b5b600061138284828501611349565b91505092915050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006113d2600f8361138b565b91506113dd8261139c565b602082019050919050565b60006020820190508181036000830152611401816113c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061144282611109565b915061144d83611109565b925082820190508082111561146557611464611408565b5b92915050565b7f43616e6e6f7420636c61696d20796574206f7220616c726561647920636c616960008201527f6d65640000000000000000000000000000000000000000000000000000000000602082015250565b60006114c760238361138b565b91506114d28261146b565b604082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f4f6e6c792068696768657374206269646465722063616e20636c61696d000000600082015250565b6000611533601d8361138b565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b600060408201905061157e6000830185611278565b61158b602083018461116c565b9392505050565b7f5072697a65207472616e73666572206661696c65640000000000000000000000600082015250565b60006115c860158361138b565b91506115d382611592565b602082019050919050565b600060208201905081810360008301526115f7816115bb565b9050919050565b7f46696e616c20626964207472616e73666572206661696c656400000000000000600082015250565b600061163460198361138b565b915061163f826115fe565b602082019050919050565b6000602082019050818103600083015261166381611627565b9050919050565b600061167582611109565b915061168083611109565b925082820261168e81611109565b915082820484148315176116a5576116a4611408565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116e682611109565b91506116f183611109565b925082611701576117006116ac565b5b828204905092915050565b60006040820190506117216000830185611278565b61172e6020830184611278565b9392505050565b60008151905061174481611113565b92915050565b6000602082840312156117605761175f611104565b5b600061176e84828501611735565b91505092915050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b60006117ad60168361138b565b91506117b882611777565b602082019050919050565b600060208201905081810360008301526117dc816117a0565b9050919050565b7f4465706c6f79657220666565207472616e73666572206661696c656400000000600082015250565b6000611819601c8361138b565b9150611824826117e3565b602082019050919050565b600060208201905081810360008301526118488161180c565b9050919050565b7f526566756e64206661696c656400000000000000000000000000000000000000600082015250565b6000611885600d8361138b565b91506118908261184f565b602082019050919050565b600060208201905081810360008301526118b481611878565b9050919050565b60006060820190506118d0600083018661116c565b6118dd602083018561116c565b6118ea604083018461116c565b94935050505056fea2646970667358221220d77a151a14c6199a8d2eda7aad6952a18271d232a9aaff030ce1ae29508c87ac64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b85780638f8a30ca1161007c5780638f8a30ca146102d457806391f90157146102f2578063d57bde7914610310578063e834a8341461032e578063ecfc7ecc1461034c578063f2fde38b1461035657610137565b8063715018a614610252578063719ce73e1461025c57806371ac08761461027a578063884bf67c146102985780638da5cb5b146102b657610137565b80634e71d92d116100ff5780634e71d92d146101d057806355458ec0146101da578063642ab4b1146101f85780636dc7a627146102165780636f28507c1461023457610137565b8063186ba2531461013c57806335fda2d1146101585780633ee881331461017657806342f1962914610194578063472bd5fc146101b2575b600080fd5b6101566004803603810190610151919061113f565b610372565b005b610160610477565b60405161016d919061117b565b60405180910390f35b61017e610484565b60405161018b9190611215565b60405180910390f35b61019c6104aa565b6040516101a9919061117b565b60405180910390f35b6101ba6104af565b6040516101c7919061117b565b60405180910390f35b6101d86104b4565b005b6101e2610793565b6040516101ef919061117b565b60405180910390f35b610200610799565b60405161020d919061117b565b60405180910390f35b61021e61079f565b60405161022b919061124b565b60405180910390f35b61023c61082c565b604051610249919061117b565b60405180910390f35b61025a61083d565b005b610264610851565b604051610271919061117b565b60405180910390f35b610282610857565b60405161028f919061117b565b60405180910390f35b6102a061085c565b6040516102ad919061117b565b60405180910390f35b6102be610866565b6040516102cb9190611287565b60405180910390f35b6102dc61088f565b6040516102e9919061117b565b60405180910390f35b6102fa610902565b6040516103079190611287565b60405180910390f35b610318610928565b604051610325919061117b565b60405180910390f35b61033661092e565b604051610343919061124b565b60405180910390f35b610354610941565b005b610370600480360381019061036b91906112ce565b610edc565b005b61037a610f62565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103d9939291906112fb565b6020604051808303816000875af11580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c919061135e565b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906113e8565b60405180910390fd5b806006600082825461046d9190611437565b9250508190555050565b68056bc75e2d6310000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603c81565b606481565b6104bc61079f565b6104fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f2906114dd565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461058b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058290611549565b60405180910390fd5b6001600860006101000a81548160ff021916908315150217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006546040518363ffffffff1660e01b8152600401610627929190611569565b6020604051808303816000875af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a919061135e565b6106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906115de565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6106ef610866565b6004546040518363ffffffff1660e01b815260040161070f929190611569565b6020604051808303816000875af115801561072e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610752919061135e565b610791576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107889061164a565b60405180910390fd5b565b60045481565b60075481565b6000600860009054906101000a900460ff161580156107cc5750603c6007546107c89190611437565b4210155b80156108275750600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b905090565b6032606461083a9190611437565b81565b610845610f62565b61084f6000610fe9565b565b60065481565b603281565b6000600654905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000600454146108b85768056bc75e2d631000006004546108b39190611437565b6108c3565b68056bc75e2d631000005b90506000612710603260646108d89190611437565b836108e3919061166a565b6108ed91906116db565b905080826108fb9190611437565b9250505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600860009054906101000a900460ff1681565b6109496110ad565b600080600454146109705768056bc75e2d6310000060045461096b9190611437565b61097b565b68056bc75e2d631000005b9050600061271060648361098f919061166a565b61099991906116db565b905060006127106032846109ad919061166a565b6109b791906116db565b905060008183856109c89190611437565b6109d29190611437565b905080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610a3292919061170c565b602060405180830381865afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a73919061174a565b1015610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906117c3565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006004549050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610b41939291906112fb565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b84919061135e565b610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba906113e8565b60405180910390fd5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600481905550826005819055508460066000828254610c249190611437565b9250508190555042600781905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610c78610866565b866040518363ffffffff1660e01b8152600401610c96929190611569565b6020604051808303816000875af1158015610cb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd9919061135e565b610d18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0f9061182f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610e7a57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610da9929190611569565b6020604051808303816000875af1158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec919061135e565b610e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e229061189b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fb68630624831a3c69cc6bb427a9b914261a14121aa4a23b9a98bcb9b0d98afdf82604051610e71919061117b565b60405180910390a25b3373ffffffffffffffffffffffffffffffffffffffff167fb46d776cdb48d081a0c7d3ff32dc2792e4e8fbce788723207515723628020d32848787604051610ec4939291906118bb565b60405180910390a2505050505050610eda6110f3565b565b610ee4610f62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f565760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f4d9190611287565b60405180910390fd5b610f5f81610fe9565b50565b610f6a6110fc565b73ffffffffffffffffffffffffffffffffffffffff16610f88610866565b73ffffffffffffffffffffffffffffffffffffffff1614610fe757610fab6110fc565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610fde9190611287565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600154036110e9576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b600033905090565b600080fd5b6000819050919050565b61111c81611109565b811461112757600080fd5b50565b60008135905061113981611113565b92915050565b60006020828403121561115557611154611104565b5b60006111638482850161112a565b91505092915050565b61117581611109565b82525050565b6000602082019050611190600083018461116c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006111db6111d66111d184611196565b6111b6565b611196565b9050919050565b60006111ed826111c0565b9050919050565b60006111ff826111e2565b9050919050565b61120f816111f4565b82525050565b600060208201905061122a6000830184611206565b92915050565b60008115159050919050565b61124581611230565b82525050565b6000602082019050611260600083018461123c565b92915050565b600061127182611196565b9050919050565b61128181611266565b82525050565b600060208201905061129c6000830184611278565b92915050565b6112ab81611266565b81146112b657600080fd5b50565b6000813590506112c8816112a2565b92915050565b6000602082840312156112e4576112e3611104565b5b60006112f2848285016112b9565b91505092915050565b60006060820190506113106000830186611278565b61131d6020830185611278565b61132a604083018461116c565b949350505050565b61133b81611230565b811461134657600080fd5b50565b60008151905061135881611332565b92915050565b60006020828403121561137457611373611104565b5b600061138284828501611349565b91505092915050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b60006113d2600f8361138b565b91506113dd8261139c565b602082019050919050565b60006020820190508181036000830152611401816113c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061144282611109565b915061144d83611109565b925082820190508082111561146557611464611408565b5b92915050565b7f43616e6e6f7420636c61696d20796574206f7220616c726561647920636c616960008201527f6d65640000000000000000000000000000000000000000000000000000000000602082015250565b60006114c760238361138b565b91506114d28261146b565b604082019050919050565b600060208201905081810360008301526114f6816114ba565b9050919050565b7f4f6e6c792068696768657374206269646465722063616e20636c61696d000000600082015250565b6000611533601d8361138b565b915061153e826114fd565b602082019050919050565b6000602082019050818103600083015261156281611526565b9050919050565b600060408201905061157e6000830185611278565b61158b602083018461116c565b9392505050565b7f5072697a65207472616e73666572206661696c65640000000000000000000000600082015250565b60006115c860158361138b565b91506115d382611592565b602082019050919050565b600060208201905081810360008301526115f7816115bb565b9050919050565b7f46696e616c20626964207472616e73666572206661696c656400000000000000600082015250565b600061163460198361138b565b915061163f826115fe565b602082019050919050565b6000602082019050818103600083015261166381611627565b9050919050565b600061167582611109565b915061168083611109565b925082820261168e81611109565b915082820484148315176116a5576116a4611408565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116e682611109565b91506116f183611109565b925082611701576117006116ac565b5b828204905092915050565b60006040820190506117216000830185611278565b61172e6020830184611278565b9392505050565b60008151905061174481611113565b92915050565b6000602082840312156117605761175f611104565b5b600061176e84828501611735565b91505092915050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b60006117ad60168361138b565b91506117b882611777565b602082019050919050565b600060208201905081810360008301526117dc816117a0565b9050919050565b7f4465706c6f79657220666565207472616e73666572206661696c656400000000600082015250565b6000611819601c8361138b565b9150611824826117e3565b602082019050919050565b600060208201905081810360008301526118488161180c565b9050919050565b7f526566756e64206661696c656400000000000000000000000000000000000000600082015250565b6000611885600d8361138b565b91506118908261184f565b602082019050919050565b600060208201905081810360008301526118b481611878565b9050919050565b60006060820190506118d0600083018661116c565b6118dd602083018561116c565b6118ea604083018461116c565b94935050505056fea2646970667358221220d77a151a14c6199a8d2eda7aad6952a18271d232a9aaff030ce1ae29508c87ac64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 944,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1050,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "usdc20",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 1068,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "highestBidder",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1070,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "currentBaseAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1072,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "highestBid",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1074,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "prizePool",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1076,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "lastBidTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1082,
        "contract": "contracts/USDC20Vault.sol:USDC20Vault",
        "label": "claimed",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}